
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/10_Inputs\/Function Blocks' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
(*************************************************************************************
* FUNCTION BLOCK: in_pedal_or_sensor
*/
* Getting poti calibration parameters, set error intervals and getting poti calibrated
	value [-1000, 1000 ], taking into account deadband
*
*	\param[in]
*	\param[in/out]
*	\param[out]
*
**************************************************************************************
* (c) Copyright by BOSCH REXROTH AG, all rights reserved *
**************************************************************************************
*
* PROJECT:	
* VERSION INFORMATION: 
*
* REVISION HISTORY:
*
*	V1.00, Vitaly Lewitan, DCRU-MA/SMC
*	23.03.2012 - Basic Version
*
*************************************************************************************)

FUNCTION_BLOCK getPedal_Sensor_fb
VAR_OUTPUT
	poti_s16		:	INT	;	(*	[0 .. 1000]			 Analog poti value of the speed potentiometer	*)
END_VAR
VAR
	poti_min_s16: INT;
	poti_max_s16: INT;
	poti_emin_s16: INT;
	poti_emax_s16: INT;
	poti_raw_s16: INT;
END_VAR

VAR_INPUT
	PotiAdjust_s16: INT;
	PotiChannel_u32: DWORD;
	DeadBand_s16: INT;
END_VAR
(* @END_DECLARATION := '0' *)
(* get poti adjustment values *)
poti_min_s16 := inext_getPotiMin( PotiAdjust_s16 );
poti_max_s16 := LIMIT(501, inext_getPotiMax( PotiAdjust_s16 ), 1000);

(*derive error thresholds from adjustment values *)
IF poti_min_s16 >= 50 THEN
	poti_emin_s16 := poti_min_s16 - 50;
ELSE
	poti_emin_s16 := 0;
END_IF

IF poti_max_s16 <= 950 THEN
	poti_emax_s16 := poti_max_s16 + 50;
ELSE
	poti_emax_s16 := 1000;
END_IF

(* read jostick poti *)
poti_raw_s16 := inext_getPoti( PotiChannel_u32, poti_min_s16, poti_max_s16, poti_emin_s16, poti_emax_s16 );
poti_raw_s16 := LIMIT (0, poti_raw_s16, ST_RANGE);

poti_s16:=calc_deadband(poti_raw_s16, Deadband_s16);
END_FUNCTION_BLOCK
